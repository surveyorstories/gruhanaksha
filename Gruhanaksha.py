

"""
/***************************************************************************
 SvamitvaPPM
                                 A QGIS plugin
 Svamitva
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-15
        copyright            : (C) 2025 by Surveyor Stories
        email                : surveyorstories@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Surveyor Stories'
__date__ = '2025-07-15'
__copyright__ = '(C) 2025 by Surveyor Stories'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import sys
import inspect
from qgis.core import QgsProject

import os.path
from qgis.PyQt.QtCore import (
    QSettings,
    QTranslator,
    qVersion,
    QCoreApplication
)


import os
import sys
import inspect
from qgis.utils import iface
from qgis.PyQt.QtWidgets import QAction, QMenu
from qgis.PyQt.QtGui import QIcon
import processing

from qgis.core import QgsProcessingAlgorithm, QgsApplication, Qgis
from .Gruhanaksha_provider import SvamitvaPPMProvider
from PyQt5.QtCore import Qt
from .master import MasterWidget
from .tools import ToolWidget
from .advanced_line import activate_tool

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]

if cmd_folder not in sys.path:
    sys.path.insert(0, cmd_folder)

master = MasterWidget()
qgis_main_window = iface.mainWindow()


class SvamitvaPPMPlugin(object):

    def __init__(self, iface):
        self.provider = None
        self.iface = iface
        self.canvas = iface.mapCanvas()
        self.tools = ToolWidget()
        self.tools.setParent(iface.mainWindow(), Qt.Window)

    def initProcessing(self):
        """Init Processing provider for QGIS >= 3.8."""
        self.provider = SvamitvaPPMProvider()
        QgsApplication.processingRegistry().addProvider(self.provider)

    def initGui(self):
        self.initProcessing()

        # Create the toolbar
        self.toolbar = self.iface.addToolBar('Gruhanaksha')
        self.toolbar.setObjectName('Gruhanaksha Toolbar')

        # Define action with icon and label
        # Make sure this file exists
        icon_path = os.path.join(os.path.join(cmd_folder, 'images/ppm.svg'))
        icon = QIcon(icon_path)
        icon_advancedicon = os.path.join(os.path.join(cmd_folder, 'images/advanced_line.svg'))
        icon = QIcon(icon_path)
        self.action = QAction(icon, "PPM Generation", self.iface.mainWindow())
        self.dropdown_button = QAction(
            QIcon(icon), "Maps", self.iface.mainWindow())
        self.action.triggered.connect(self.run_svamitva_algorithm)
        self.dropdown_button.triggered.connect(self.run_svamitva_algorithm)

        # self.toolbar.addAction(self.action)
        self.iface.addPluginToMenu("&Gruhanaksha", self.action)
        # master panel
        self.action_master = QAction(QIcon(icon_path), 'Master Data',
                                     self.iface.mainWindow())
        self.action_master.triggered.connect(self.master_data)
        self.iface.addPluginToMenu(
            u"&Gruhanaksha", self.action_master)
        # advanced line 
        self.action_advanced_line = QAction(QIcon(icon_advancedicon), 'Advanced Line',
                                     self.iface.mainWindow())
        self.action_advanced_line.triggered.connect(self.show_advanced_line)
        self.toolbar.addAction(self.action_advanced_line)

        # Define tools with icon and label
        # Make sure this file exists
        icon_path = os.path.join(os.path.join(cmd_folder, 'images/ppm.svg'))
        topo = os.path.join(os.path.join(cmd_folder, 'images/topo.svg'))

        self.action_tools = QAction(
            QIcon(topo), "Tools", self.iface.mainWindow())

        self.dropdown_button = QAction(
            QIcon(icon), "PPMs", self.iface.mainWindow())
        self.action_tools.triggered.connect(self.show_tools)
        self.dropdown_button.triggered.connect(self.run_svamitva_algorithm)

        # Create a dropdown menu

        self.dropdown_menu = QMenu("Maps Menu")
        # Add actions to the dropdown menu
        self.dropdown_menu.addAction(self.action_master)
        self.dropdown_menu.addAction(self.action)

        # Create a button in the toolbar to display the dropdown menu with an icon
        self.dropdown_button.setMenu(self.dropdown_menu)
        self.toolbar.addAction(self.dropdown_button)
        self.toolbar.addAction(self.action_tools)

    def unload(self):
        """Remove plugin from GUI and unregister provider."""
        # Use hasattr to prevent errors if initGui failed partway through

        # Unregister processing provider safely
        if hasattr(self, 'provider') and self.provider:
            try:
                QgsApplication.processingRegistry().removeProvider(self.provider)
            except RuntimeError:
                # This can happen on QGIS shutdown if the provider is already deleted
                pass

        # Clean up all actions from menus
        if hasattr(self, 'action'):
            self.iface.removePluginMenu("&Gruhanaksha", self.action)
        if hasattr(self, 'action_master'):
            self.iface.removePluginMenu(u"&Gruhanaksha", self.action_master)

        # Unregister all main window actions. This is good practice.
        for action_name in ['action', 'action_master', 'action_advanced_line', 'action_tools', 'dropdown_button']:
            if hasattr(self, action_name):
                self.iface.unregisterMainWindowAction(getattr(self, action_name))

        # Clean up toolbar. Qt's parent-child relationship will handle the C++ object destruction.
        # We just need to delete our Python reference to it.
        if hasattr(self, 'toolbar'):
            del self.toolbar

    def run_svamitva_algorithm(self):
        """Trigger custom logic or Processing algorithm"""
        processing.execAlgorithmDialog("Gruhanaksha:ppm_new_model")

    def master_data(self):
        if QgsProject.instance().fileName():
            master.show()
        else:
            asksaveProject()

    def show_tools(self):
        if QgsProject.instance().fileName():
            self.tools.show()
        else:
            asksaveProject()
    def show_advanced_line(self):
        if QgsProject.instance().fileName():
            activate_tool()
        else:
            asksaveProject()



def asksaveProject():
    """
    Version that uses QGIS built-in save functionality.

    Returns:
        bool: True if project was saved successfully, False otherwise.
    """
    project = QgsProject.instance()

    if project.fileName():
        # Project has filename, save directly
        return project.save()
    else:
        # Use QGIS built-in save as functionality
        from qgis.utils import iface
        iface.actionSaveProjectAs().trigger()  # This opens the Save As dialog

        # Check if project now has a filename (user saved it)
        if project.fileName():
            iface.messageBar().pushMessage("Success", "Project saved successfully.",
                                           level=Qgis.Success, duration=3)
            return True
        else:
            iface.messageBar().pushMessage("Warning", "Project was not saved.",
                                           level=Qgis.Warning, duration=3)
            return False
